// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: retrieval/issue/v1/service.proto

package issue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IssueRetrievalService_Retrieve_FullMethodName = "/retrieval.issue.v1.IssueRetrievalService/Retrieve"
)

// IssueRetrievalServiceClient is the client API for IssueRetrievalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 이슈 검색 서비스.
type IssueRetrievalServiceClient interface {
	// 이슈를 검색하고 찾은 결과를 반환합니다.
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error)
}

type issueRetrievalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIssueRetrievalServiceClient(cc grpc.ClientConnInterface) IssueRetrievalServiceClient {
	return &issueRetrievalServiceClient{cc}
}

func (c *issueRetrievalServiceClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetrieveResponse)
	err := c.cc.Invoke(ctx, IssueRetrievalService_Retrieve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssueRetrievalServiceServer is the server API for IssueRetrievalService service.
// All implementations must embed UnimplementedIssueRetrievalServiceServer
// for forward compatibility.
//
// 이슈 검색 서비스.
type IssueRetrievalServiceServer interface {
	// 이슈를 검색하고 찾은 결과를 반환합니다.
	Retrieve(context.Context, *RetrieveRequest) (*RetrieveResponse, error)
	mustEmbedUnimplementedIssueRetrievalServiceServer()
}

// UnimplementedIssueRetrievalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIssueRetrievalServiceServer struct{}

func (UnimplementedIssueRetrievalServiceServer) Retrieve(context.Context, *RetrieveRequest) (*RetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedIssueRetrievalServiceServer) mustEmbedUnimplementedIssueRetrievalServiceServer() {}
func (UnimplementedIssueRetrievalServiceServer) testEmbeddedByValue()                               {}

// UnsafeIssueRetrievalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IssueRetrievalServiceServer will
// result in compilation errors.
type UnsafeIssueRetrievalServiceServer interface {
	mustEmbedUnimplementedIssueRetrievalServiceServer()
}

func RegisterIssueRetrievalServiceServer(s grpc.ServiceRegistrar, srv IssueRetrievalServiceServer) {
	// If the following call pancis, it indicates UnimplementedIssueRetrievalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IssueRetrievalService_ServiceDesc, srv)
}

func _IssueRetrievalService_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRetrievalServiceServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueRetrievalService_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRetrievalServiceServer).Retrieve(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IssueRetrievalService_ServiceDesc is the grpc.ServiceDesc for IssueRetrievalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IssueRetrievalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "retrieval.issue.v1.IssueRetrievalService",
	HandlerType: (*IssueRetrievalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Retrieve",
			Handler:    _IssueRetrievalService_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "retrieval/issue/v1/service.proto",
}
